{"ast":null,"code":"var _jsxFileName = \"F:\\\\The Complete 2023 Web Development Bootcamp\\\\STUDY-PROJECTS\\\\YoutubeProjects\\\\weather_app\\\\src\\\\components\\\\WeatherScreen\\\\WeatherScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport debounce from 'lodash.debounce';\nimport './weatherScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherScreen = () => {\n  _s();\n  const oldKey = \"6394d6fa5b4b7fd9715700a3b19509f8\";\n  const [showWeather, setShowWeather] = useState(false);\n  const [cityLatitude, setCityLatitude] = useState(0);\n  const [cityLongitude, setCityLongitude] = useState(0);\n  const [cityName, setCityName] = useState('');\n  const [weather, setWeather] = useState({\n    temperature: 0,\n    humidity: 0,\n    feels_like: 0\n  });\n  const [geoLocation, setGeoLocation] = useState([]);\n  const [clickedCityData, setClickedCityData] = useState([]);\n\n  //getting the user input\n  const [userInput, setUserInput] = useState(\"\");\n  const updateUserInput = e => {\n    var _e$target;\n    setUserInput(e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value);\n  };\n  const debouncedOnChange = debounce(updateUserInput, 600);\n  useEffect(() => {\n    const searchTemp = async () => {\n      //BLOCKED ACCESS const tempURL = `https://api.openweathermap.org/data/2.5/weather?lat=${cityLatitude}&lon=${cityLongitude}&appid=${oldKey}&units=metric`;\n\n      const tempURL = `https://api.open-meteo.com/v1/forecast?latitude=${cityLatitude}&longitude=${cityLongitude}&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,rain,wind_speed_10m,wind_direction_10m&hourly=temperature_2m,relative_humidity_2m,apparent_temperature,precipitation_probability,precipitation,rain,snowfall,visibility,wind_speed_10m,wind_speed_80m,wind_speed_120m&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset,daylight_duration,sunshine_duration&timezone=GMT`;\n      const results = await fetch(tempURL);\n      const data = await results.json();\n      console.log('Data from first useEffect:  ', data);\n\n      // const temperature = Math.round(data.main.temp);\n      // const humidity = Math.round(data.main.humidity);\n      // const feels_like = Math.round(data.main.feels_like);\n\n      // setWeather({\n      //     temperature: temperature,\n      //     humidity: humidity,\n      //     feels_like: feels_like\n      // });\n    };\n    searchTemp();\n  }, [cityLatitude, cityLongitude]);\n\n  // console.log(\"Data outside first useEffect: \", weather); \n\n  //From here I satrt the process of getting geolocation of the city     \n\n  //Here I take the geoLocation data.\n  useEffect(() => {\n    const search = async () => {\n      //Blocked const URL = `http://api.openweathermap.org/geo/1.0/direct?q=${userInput},&limit=5&appid=${oldKey}`;\n      const URL = `https://geocoding-api.open-meteo.com/v1/search?name=${userInput}&count=10&language=en&format=json`;\n      const results = await fetch(URL);\n      const data = await results.json();\n      console.log('Data from second useEffect: ', data.results);\n      // data.results.map((item, index) => {\n      //    console.log('cities:' , item.country);\n      // })\n\n      setGeoLocation(data.results);\n    };\n    search();\n  }, [userInput]);\n\n  // console.log('geolocation hook:', geoLocation);\n  //------------------------------------>\n\n  //Here i get the clicked city geolocation info\n  const handleClick = e => {\n    const li = e.target;\n    const data = li.dataset; // Access the dataset of the clicked element\n    //    console.log('li dataset', data);\n    setCityLatitude(data.lat);\n    setCityLongitude(data.lon);\n    //    geoLocation.map(({latitude, longitude}, index) => {\n    //     console.log('after click: ', latitude, longitude);\n    //    })\n\n    //    console.log(weather);\n    //    console.log(weather.main.temp);\n    setClickedCityData(data);\n    setShowWeather(true);\n    //    setGeoLocation(data); \n\n    console.log('clicked element:', li);\n    //    console.log('Clicked element city name:', data.city);\n    //    console.log('Clicked element city country:', data.country);\n    //    console.log('Clicked element city latitude:', data.latitude);\n    //    console.log('Clicked element city longitude:', data.longitude);\n  };\n\n  //    console.log(`Clicked city and its country: ${clickedCityData.city} ${clickedCityData.country}`);\n  //---------------------------------------------->\n\n  const buttonClick = ev => {\n    setShowWeather(false);\n  };\n  console.log('type of latitude:', typeof cityLatitude);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showWeather ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__show-wheather \",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"weather\",\n        className: \"flex__center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"degree\",\n          children: [weather.temperature, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"city\",\n          children: [clickedCityData.city, \" \", clickedCityData.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: buttonClick,\n          id: \"change\",\n          children: \"Change City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Wind\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"windValue\",\n              className: \"value\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 67\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Km/h\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 76\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Feels Like\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"feelsLikeValue\",\n              className: \"value\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\xB0C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 72\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 87\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Humidity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"humidityValue\",\n              className: \"value\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 71\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"%\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 80\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: debouncedOnChange,\n        type: \"text\",\n        placeholder: \"Search City...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this), geoLocation ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        onClick: handleClick,\n        children: geoLocation.map(({\n          name,\n          latitude,\n          longitude,\n          country\n        }, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"app__list-item\",\n          \"data-lat\": latitude,\n          \"data-lon\": longitude,\n          \"data-city\": name,\n          \"data-country\": country,\n          children: [name, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 36\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 1\n  }, this);\n};\n_s(WeatherScreen, \"hkaGn0ekc2jm7sCtPaftKm7W80o=\");\n_c = WeatherScreen;\nexport default WeatherScreen;\n\n/* <div className=\"app__main-container\" >\r\n\r\n<div onClick={handleClick} className=\"app__form\">\r\n    <form>\r\n        <input onKeyUp={debouncedOnChange} type=\"text\" placeholder=\"Search City...\" />\r\n        <ul>\r\n        {mapItems()}\r\n        </ul>\r\n\r\n    </form>\r\n</div>\r\n\r\n<div className=\"app__show-wheather \">\r\n\r\n    <div id=\"weather\" className=\"flex__center\">\r\n        <img src={`https://openweathermap.org/img/wn/${infoToExport.icon}@4x.png`} alt=\"icon\" id=\"icon\" />\r\n        <h1 className=\"degree\">{infoToExport.temp}&deg;C</h1>\r\n        <h2 id=\"city\">{info.cityName}</h2>\r\n        <button id=\"change\">Change City</button>\r\n\r\n        <div className=\"info\">\r\n\r\n            <div>\r\n                <h3>Wind</h3>\r\n                <div id=\"windValue\" className=\"value\"><p>{infoToExport.wind}</p><span>Km/h</span></div>\r\n            </div>\r\n            <div>\r\n                <h3>Feels Like</h3>\r\n                <div id=\"feelsLikeValue\" className=\"value\"><p>{infoToExport.feelsLike}&deg;C</p><span></span></div>\r\n            </div>\r\n            <div>\r\n                <h3>Humidity</h3>\r\n                <div id=\"humidityValue\" className=\"value\"><p>{infoToExport.humidity}</p><span>%</span></div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n</div>\r\n    \r\n</div>\r\n\r\n\r\n\r\n---------------- */ //}\n// const [infoToExport, setInfoToExport] = useState([{\n//     temp: 0,\n//     feelsLike: 0,\n//     humidity: 0,\n//     wind: 0,\n//     icon: ''\n// }]);\n\n// const [userInput, setUserInput] = useState(\"\");\n// const [ulValue, setUlValue] = useState([]);\n// const updateUserInput = e => setUserInput(e?.target?.value);\n// const debouncedOnChange = debounce(updateUserInput, 600);\n\n/*Here I get the weather information */\n\n// const [weatherData, setWeather] = useState({});\n// const [info, setInfo] = useState({\n//     cityLat: 52.377956,\n//     cityLon: 4.897070,\n//     cityName : 'Amsterdam',\n\n// })\n\n// useEffect(() => {\n\n//     fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${info.cityLat}&lon=${info.cityLon}&appid=${key}&units=metric`)\n//     .then(response => response.json())\n//     .then(data => setWeather(data))\n//     .catch(err => console.log(err))\n// }, []);\n\n// const handleClick = (ev) => {\n//     const li = ev.target;\n//     const {lat, lon, name} = li.dataset;\n\n//     if (!lat) {\n//         return;\n//     }\n//     console.log(`Test 2 ${lat}`);\n//     setInfo(({\n//         cityLat: lat,\n//         cityLon: lon,\n//         cityName: name\n//     }));\n\n//     const temp = Math.round(weatherData.main.temp);\n//     const feelsLike = Math.round(weatherData.main.feels_like);\n//     const humidity = Math.round(weatherData.main.humidity);\n//     const wind = Math.round(weatherData.wind.speed);\n//     const icon = weatherData.weather[0].icon;\n//     setInfoToExport({ temp, feelsLike, humidity, wind, icon });\n//     }\n\n/* Trough here */\n\n/*Here I get the City name and can click on it to get the onfo about the weather */\n// useEffect(() => {\n\n//      fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${userInput}&limit=5&appid=${key}`)\n//     .then(response => response.json())\n//     .then(data => {\n//         if (Array.isArray(data)) {\n//           setUlValue(data);\n\n//         } else {\n//           setUlValue([]);\n//         }\n//       })\n//     .catch(err => console.log(err))\n\n// }, [userInput]);\n\n// useEffect(() => {\n//     const fetchData = async () => {\n//         const result = await fetch(cityNameURL);\n//         result.json().then(json => {\n//             setUserInput(json.current.temp_c);\n//         })\n\n//     }\n//     fetchData();\n//     console.log(userInput);\n// }, []);\n\n// const mapItems = () => (\n//     ulValue.map(({name, lat, lon, country}, index) => (\n//         <li \n\n//         data-lat={lat} \n//         data-lon={lon} \n//         data-name={name} \n//         key={index}\n//         >\n//         {name} <span>{country}</span>\n\n//         </li>\n//     ))\n// )\n\n/* Trough here */\nvar _c;\n$RefreshReg$(_c, \"WeatherScreen\");","map":{"version":3,"names":["React","useState","useEffect","debounce","jsxDEV","_jsxDEV","WeatherScreen","_s","oldKey","showWeather","setShowWeather","cityLatitude","setCityLatitude","cityLongitude","setCityLongitude","cityName","setCityName","weather","setWeather","temperature","humidity","feels_like","geoLocation","setGeoLocation","clickedCityData","setClickedCityData","userInput","setUserInput","updateUserInput","e","_e$target","target","value","debouncedOnChange","searchTemp","tempURL","results","fetch","data","json","console","log","search","URL","handleClick","li","dataset","lat","lon","buttonClick","ev","children","className","id","fileName","_jsxFileName","lineNumber","columnNumber","city","country","onClick","onChange","type","placeholder","map","name","latitude","longitude","index","_c","$RefreshReg$"],"sources":["F:/The Complete 2023 Web Development Bootcamp/STUDY-PROJECTS/YoutubeProjects/weather_app/src/components/WeatherScreen/WeatherScreen.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport './weatherScreen.css'\r\nconst WeatherScreen = () => {\r\n    const oldKey = \"6394d6fa5b4b7fd9715700a3b19509f8\";\r\n    const [showWeather, setShowWeather] = useState(false);\r\n    \r\n    \r\n\r\n    const [cityLatitude, setCityLatitude] = useState(0);\r\n    const [cityLongitude, setCityLongitude] = useState(0);\r\n\r\n    const [cityName, setCityName] = useState('');\r\n    const [weather, setWeather] = useState({\r\n        temperature: 0,\r\n        humidity: 0,\r\n        feels_like: 0\r\n    });\r\n    const [geoLocation, setGeoLocation] = useState([]);\r\n    const [clickedCityData, setClickedCityData] = useState([]);\r\n\r\n    //getting the user input\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    \r\n    const updateUserInput = (e) => {\r\n        setUserInput(e?.target?.value); \r\n    }\r\n    const debouncedOnChange = debounce(updateUserInput, 600);\r\n\r\n    useEffect(() => {\r\n        const searchTemp = async () => {\r\n            \r\n                //BLOCKED ACCESS const tempURL = `https://api.openweathermap.org/data/2.5/weather?lat=${cityLatitude}&lon=${cityLongitude}&appid=${oldKey}&units=metric`;\r\n               \r\n               \r\n               \r\n                const tempURL = `https://api.open-meteo.com/v1/forecast?latitude=${cityLatitude}&longitude=${cityLongitude}&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,rain,wind_speed_10m,wind_direction_10m&hourly=temperature_2m,relative_humidity_2m,apparent_temperature,precipitation_probability,precipitation,rain,snowfall,visibility,wind_speed_10m,wind_speed_80m,wind_speed_120m&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset,daylight_duration,sunshine_duration&timezone=GMT`;\r\n              \r\n                  const results = await fetch(tempURL);\r\n                  const data = await results.json();\r\n                  console.log('Data from first useEffect:  ', data); \r\n\r\n                  \r\n                // const temperature = Math.round(data.main.temp);\r\n                // const humidity = Math.round(data.main.humidity);\r\n                // const feels_like = Math.round(data.main.feels_like);\r\n\r\n                // setWeather({\r\n                //     temperature: temperature,\r\n                //     humidity: humidity,\r\n                //     feels_like: feels_like\r\n                // });\r\n\r\n               \r\n\r\n    };\r\nsearchTemp();\r\n    \r\n}, [cityLatitude, cityLongitude]);\r\n\r\n    // console.log(\"Data outside first useEffect: \", weather); \r\n\r\n//From here I satrt the process of getting geolocation of the city     \r\n\r\n//Here I take the geoLocation data.\r\n    useEffect(() => {\r\n        const search = async () => {\r\n            //Blocked const URL = `http://api.openweathermap.org/geo/1.0/direct?q=${userInput},&limit=5&appid=${oldKey}`;\r\n            const URL = `https://geocoding-api.open-meteo.com/v1/search?name=${userInput}&count=10&language=en&format=json`\r\n            const results = await fetch(URL);\r\n            const data = await results.json();\r\n            console.log('Data from second useEffect: ', data.results);\r\n            // data.results.map((item, index) => {\r\n            //    console.log('cities:' , item.country);\r\n            // })\r\n            \r\n\r\n            setGeoLocation(data.results);\r\n                                                   \r\n        }\r\n     search();\r\n    }, [userInput]);\r\n\r\n    // console.log('geolocation hook:', geoLocation);\r\n//------------------------------------>\r\n\r\n\r\n//Here i get the clicked city geolocation info\r\n   const handleClick = (e) => {\r\n       const li = e.target;\r\n       const data = li.dataset;  // Access the dataset of the clicked element\r\n    //    console.log('li dataset', data);\r\n       setCityLatitude(data.lat);\r\n       setCityLongitude(data.lon);\r\n    //    geoLocation.map(({latitude, longitude}, index) => {\r\n    //     console.log('after click: ', latitude, longitude);\r\n    //    })\r\n    \r\n    //    console.log(weather);\r\n    //    console.log(weather.main.temp);\r\n       setClickedCityData(data);\r\n       setShowWeather(true)\r\n    //    setGeoLocation(data); \r\n    \r\n       console.log('clicked element:', li);\r\n    //    console.log('Clicked element city name:', data.city);\r\n    //    console.log('Clicked element city country:', data.country);\r\n    //    console.log('Clicked element city latitude:', data.latitude);\r\n    //    console.log('Clicked element city longitude:', data.longitude);\r\n   }\r\n\r\n//    console.log(`Clicked city and its country: ${clickedCityData.city} ${clickedCityData.country}`);\r\n//---------------------------------------------->\r\n\r\n\r\nconst buttonClick = (ev) => {\r\n    \r\n    setShowWeather(false);\r\n}\r\n\r\nconsole.log('type of latitude:', typeof cityLatitude);\r\n\r\n\r\n\r\nreturn (\r\n\r\n<div >\r\n\r\n    {showWeather ? (\r\n        <div className=\"app__show-wheather \">\r\n\r\n                <div id=\"weather\" className=\"flex__center\">\r\n                    {/* <img src={`https://openweathermap.org/img/wn/${infoToExport.icon}@4x.png`} alt=\"icon\" id=\"icon\" /> */}\r\n                    <h1 className=\"degree\">{weather.temperature}&deg;C</h1>\r\n                    <h2 id=\"city\">{clickedCityData.city} {clickedCityData.country}</h2>\r\n                    <button onClick={buttonClick} id=\"change\">Change City</button>\r\n\r\n                    <div className=\"info\">\r\n\r\n                        <div>\r\n                            <h3>Wind</h3>\r\n                            <div id=\"windValue\" className=\"value\"><p>{}</p><span>Km/h</span></div>\r\n                        </div>\r\n                        <div>\r\n                            <h3>Feels Like</h3>\r\n                            <div id=\"feelsLikeValue\" className=\"value\"><p>{}&deg;C</p><span></span></div>\r\n                        </div>\r\n                        <div>\r\n                            <h3>Humidity</h3>\r\n                            <div id=\"humidityValue\" className=\"value\"><p>{}</p><span>%</span></div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n        </div>\r\n\r\n\r\n\r\n    ) : (\r\n    <form >\r\n            <input onChange={debouncedOnChange} type=\"text\" placeholder=\"Search City...\" />\r\n\r\n            {geoLocation ? (\r\n                <ul onClick={handleClick}>\r\n                    {geoLocation.map(({name, latitude, longitude, country}, index) => (\r\n                        <li className=\"app__list-item\"\r\n                        key={index}\r\n                        data-lat={latitude}\r\n                        data-lon={longitude}\r\n                        data-city={name}\r\n                        data-country={country}\r\n                        >\r\n                            {name} <span>{country}</span>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>Loading...</p>\r\n            )\r\n            \r\n            }\r\n        </form>\r\n\r\n    )}\r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>\r\n\r\n    )\r\n\r\n     \r\n\r\n}\r\n\r\n\r\nexport default WeatherScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* <div className=\"app__main-container\" >\r\n\r\n<div onClick={handleClick} className=\"app__form\">\r\n    <form>\r\n        <input onKeyUp={debouncedOnChange} type=\"text\" placeholder=\"Search City...\" />\r\n        <ul>\r\n        {mapItems()}\r\n        </ul>\r\n\r\n    </form>\r\n</div>\r\n\r\n<div className=\"app__show-wheather \">\r\n\r\n    <div id=\"weather\" className=\"flex__center\">\r\n        <img src={`https://openweathermap.org/img/wn/${infoToExport.icon}@4x.png`} alt=\"icon\" id=\"icon\" />\r\n        <h1 className=\"degree\">{infoToExport.temp}&deg;C</h1>\r\n        <h2 id=\"city\">{info.cityName}</h2>\r\n        <button id=\"change\">Change City</button>\r\n\r\n        <div className=\"info\">\r\n\r\n            <div>\r\n                <h3>Wind</h3>\r\n                <div id=\"windValue\" className=\"value\"><p>{infoToExport.wind}</p><span>Km/h</span></div>\r\n            </div>\r\n            <div>\r\n                <h3>Feels Like</h3>\r\n                <div id=\"feelsLikeValue\" className=\"value\"><p>{infoToExport.feelsLike}&deg;C</p><span></span></div>\r\n            </div>\r\n            <div>\r\n                <h3>Humidity</h3>\r\n                <div id=\"humidityValue\" className=\"value\"><p>{infoToExport.humidity}</p><span>%</span></div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n</div>\r\n    \r\n</div>\r\n\r\n\r\n\r\n---------------- *///}\r\n    // const [infoToExport, setInfoToExport] = useState([{\r\n    //     temp: 0,\r\n    //     feelsLike: 0,\r\n    //     humidity: 0,\r\n    //     wind: 0,\r\n    //     icon: ''\r\n    // }]);\r\n\r\n    \r\n    // const [userInput, setUserInput] = useState(\"\");\r\n    // const [ulValue, setUlValue] = useState([]);\r\n    // const updateUserInput = e => setUserInput(e?.target?.value);\r\n    // const debouncedOnChange = debounce(updateUserInput, 600);\r\n\r\n    \r\n/*Here I get the weather information */\r\n\r\n    // const [weatherData, setWeather] = useState({});\r\n    // const [info, setInfo] = useState({\r\n    //     cityLat: 52.377956,\r\n    //     cityLon: 4.897070,\r\n    //     cityName : 'Amsterdam',\r\n        \r\n    // })\r\n\r\n    \r\n    \r\n    \r\n    // useEffect(() => {\r\n\r\n    //     fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${info.cityLat}&lon=${info.cityLon}&appid=${key}&units=metric`)\r\n    //     .then(response => response.json())\r\n    //     .then(data => setWeather(data))\r\n    //     .catch(err => console.log(err))\r\n    // }, []);\r\n    \r\n    \r\n    // const handleClick = (ev) => {\r\n    //     const li = ev.target;\r\n    //     const {lat, lon, name} = li.dataset;\r\n        \r\n    //     if (!lat) {\r\n    //         return;\r\n    //     }\r\n    //     console.log(`Test 2 ${lat}`);\r\n    //     setInfo(({\r\n    //         cityLat: lat,\r\n    //         cityLon: lon,\r\n    //         cityName: name\r\n    //     }));\r\n          \r\n        \r\n    //     const temp = Math.round(weatherData.main.temp);\r\n    //     const feelsLike = Math.round(weatherData.main.feels_like);\r\n    //     const humidity = Math.round(weatherData.main.humidity);\r\n    //     const wind = Math.round(weatherData.wind.speed);\r\n    //     const icon = weatherData.weather[0].icon;\r\n    //     setInfoToExport({ temp, feelsLike, humidity, wind, icon });\r\n    //     }\r\n\r\n/* Trough here */\r\n\r\n/*Here I get the City name and can click on it to get the onfo about the weather */\r\n    // useEffect(() => {\r\n\r\n    //      fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${userInput}&limit=5&appid=${key}`)\r\n    //     .then(response => response.json())\r\n    //     .then(data => {\r\n    //         if (Array.isArray(data)) {\r\n    //           setUlValue(data);\r\n              \r\n    //         } else {\r\n    //           setUlValue([]);\r\n    //         }\r\n    //       })\r\n    //     .catch(err => console.log(err))\r\n\r\n    // }, [userInput]);\r\n\r\n    // useEffect(() => {\r\n    //     const fetchData = async () => {\r\n    //         const result = await fetch(cityNameURL);\r\n    //         result.json().then(json => {\r\n    //             setUserInput(json.current.temp_c);\r\n    //         })\r\n            \r\n    //     }\r\n    //     fetchData();\r\n    //     console.log(userInput);\r\n    // }, []);\r\n\r\n    // const mapItems = () => (\r\n    //     ulValue.map(({name, lat, lon, country}, index) => (\r\n    //         <li \r\n\r\n    //         data-lat={lat} \r\n    //         data-lon={lon} \r\n    //         data-name={name} \r\n    //         key={index}\r\n    //         >\r\n    //         {name} <span>{country}</span>\r\n\r\n    //         </li>\r\n    //     ))\r\n    // )\r\n\r\n/* Trough here */\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}