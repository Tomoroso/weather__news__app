{"ast":null,"code":"var _jsxFileName = \"F:\\\\The Complete 2023 Web Development Bootcamp\\\\STUDY-PROJECTS\\\\YoutubeProjects\\\\weather_app\\\\src\\\\components\\\\SearchCity\\\\SearchCity.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport debounce from 'lodash.debounce';\nimport './searchCity.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchCity = () => {\n  _s();\n  //    const Oldkey = \"1d57fcba75368cc323dc71241f670c5d\";\n\n  //    const [storedWeather, setStoredWeather] = useState({\n  //     temperature: 0,\n  //     wind: 0,\n  //     humidity: 0,\n  //     feelslike_c: 0,\n  //     weatherType: '',\n  //     icon: '',\n  //     country: '',\n  //     localTime: 0,\n  //     lastUpdated: ''\n  //    });\n\n  const key = \"d1befbde65e241b0a7d75223242702\";\n  const [cityNameInput, setCityNameInput] = useState('');\n  const [liDropInfo, setLiDropInfo] = useState([{}]);\n\n  /*Here I get the city name from user input */\n  const userInputCityName = ev => {\n    var _ev$target;\n    setCityNameInput(ev === null || ev === void 0 ? void 0 : (_ev$target = ev.target) === null || _ev$target === void 0 ? void 0 : _ev$target.value);\n  };\n  console.log(cityNameInput);\n\n  //Here i make the execution of userInput to wait 6 sec. until run\n\n  const debouncedOnChange = debounce(userInputCityName, 600);\n  useEffect(() => {\n    const search = async () => {\n      const liURL = `http://api.weatherapi.com/v1/search.json?key=${key}&q=${cityNameInput}`;\n      const response = await fetch(liURL);\n      const data = await response.json();\n      setLiDropInfo(data);\n      console.log(`Here I have the Data: ${data}`);\n    };\n    search();\n  }, [cityNameInput]);\n  console.log(liDropInfo);\n\n  // HERE I START THE SEARCH CITY AND LIST DROP DOWN\n  const handleClick = e => {\n    const li = e.target;\n    const {\n      lat,\n      lon,\n      name\n    } = li.dataset;\n    console.log('working click');\n  };\n\n  //    const mapItems = () => (\n\n  //     liDropInfo.map((city, index) => (\n\n  //         console.log(city)\n  //        <li\n  //        data-lat={lat}\n  //        data-lon={lon}\n  //        data-name={name}\n  //        key={index}\n  //        >\n\n  //        {name} <span>{country}</span>\n\n  //        </li>\n  //     ))\n  //    )\n  //    const OLDcityURL = `http://api.openweathermap.org/geo/1.0/direct?q=${cityNameInput}&limit=5&appid=${key}`;\n  //    const apiURL = `http://api.weatherapi.com/v1/current.json?key=${key}&q=${cityNameInput}&aqi=no`;\n\n  //    useEffect(() => {\n\n  //     const fetchData = async () => {\n\n  //         if (cityNameInput && cityNameInput.trim() !== \"\") {\n  //             const result = await fetch(apiURL);\n  //             result.json().then(json => {\n  //                 const temperature = json.current.temp_c;\n  //                 const wind = json.current.wind_kph;\n  //                 const humidity = json.current.humidity;\n  //                 const feelslike_c = json.current.feelslike_c;\n  //                 const weatherType = json.current.condition.text;\n  //                 const icon = json.current.condition.icon;\n  //                 const localTime = json.location.localtime;\n  //                 const lastUpdated = json.current.last_updated;\n  //                 const country = json.location.country;\n  //                 setStoredWeather({temperature, wind, humidity, feelslike_c, weatherType, icon, country, localTime, lastUpdated});\n\n  //                 const lat = json.location.lat;\n  //                 const lon = json.location.lon;\n  //                 const cityName = json.location.name;\n  //                 // setLiDropInfo([{lat, lon, cityName, country}]);\n\n  //             })\n  //         }\n\n  //     };\n  //     fetchData();\n\n  //    }, [cityNameInput]);\n\n  //    const liURL = `http://api.weatherapi.com/v1key=${key}&q=${liDropInfo.lat}&q=${liDropInfo.lon}`\n\n  //////\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app__main-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleClick,\n      className: \"app__form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onKeyUp: debouncedOnChange,\n          type: \"text\",\n          placeholder: \"Search City...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchCity, \"w89caqVRolOMyM5sYZEe6rtjvKQ=\");\n_c = SearchCity;\nexport default SearchCity;\nvar _c;\n$RefreshReg$(_c, \"SearchCity\");","map":{"version":3,"names":["React","useState","useEffect","debounce","jsxDEV","_jsxDEV","SearchCity","_s","key","cityNameInput","setCityNameInput","liDropInfo","setLiDropInfo","userInputCityName","ev","_ev$target","target","value","console","log","debouncedOnChange","search","liURL","response","fetch","data","json","handleClick","e","li","lat","lon","name","dataset","className","children","onClick","onKeyUp","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/The Complete 2023 Web Development Bootcamp/STUDY-PROJECTS/YoutubeProjects/weather_app/src/components/SearchCity/SearchCity.jsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport './searchCity.css';\r\n\r\nconst SearchCity = () => {\r\n//    const Oldkey = \"1d57fcba75368cc323dc71241f670c5d\";\r\n\r\n\r\n//    const [storedWeather, setStoredWeather] = useState({\r\n    //     temperature: 0,\r\n       //     wind: 0,\r\n//     humidity: 0,\r\n//     feelslike_c: 0,\r\n//     weatherType: '',\r\n//     icon: '',\r\n//     country: '',\r\n//     localTime: 0,\r\n//     lastUpdated: ''\r\n//    });\r\n\r\nconst key = \"d1befbde65e241b0a7d75223242702\"\r\nconst [cityNameInput, setCityNameInput] = useState('');\r\n\r\nconst [liDropInfo, setLiDropInfo] = useState([\r\n    {\r\n\r\n\r\n    }\r\n]);\r\n\r\n\r\n\r\n   /*Here I get the city name from user input */\r\nconst userInputCityName = (ev) => {\r\n       setCityNameInput(ev?.target?.value);\r\n   }\r\n console.log(cityNameInput);\r\n\r\n   //Here i make the execution of userInput to wait 6 sec. until run\r\n\r\n   const debouncedOnChange = debounce(userInputCityName, 600);\r\n   \r\n   useEffect(() => {\r\n    const search = async () => {\r\n        const liURL = `http://api.weatherapi.com/v1/search.json?key=${key}&q=${cityNameInput}`;\r\n            const response = await fetch(liURL);\r\n            const data = await response.json();\r\n            \r\n                setLiDropInfo(data);\r\n                console.log(`Here I have the Data: ${data}`);\r\n    }\r\n    search();\r\n   }, [cityNameInput]);\r\n   console.log(liDropInfo);\r\n   \r\n   // HERE I START THE SEARCH CITY AND LIST DROP DOWN\r\n   const handleClick = (e) => {\r\n    const li = e.target;\r\n    const {lat, lon, name} = li.dataset;\r\n    console.log('working click');\r\n   }\r\n   \r\n//    const mapItems = () => (\r\n    \r\n//     liDropInfo.map((city, index) => (\r\n\r\n//         console.log(city)\r\n//        <li\r\n//        data-lat={lat}\r\n//        data-lon={lon}\r\n//        data-name={name}\r\n//        key={index}\r\n//        >\r\n   \r\n//        {name} <span>{country}</span>\r\n   \r\n//        </li>\r\n//     ))\r\n//    )\r\n//    const OLDcityURL = `http://api.openweathermap.org/geo/1.0/direct?q=${cityNameInput}&limit=5&appid=${key}`;\r\n//    const apiURL = `http://api.weatherapi.com/v1/current.json?key=${key}&q=${cityNameInput}&aqi=no`;\r\n\r\n//    useEffect(() => {\r\n\r\n//     const fetchData = async () => {\r\n\r\n//         if (cityNameInput && cityNameInput.trim() !== \"\") {\r\n//             const result = await fetch(apiURL);\r\n//             result.json().then(json => {\r\n//                 const temperature = json.current.temp_c;\r\n//                 const wind = json.current.wind_kph;\r\n//                 const humidity = json.current.humidity;\r\n//                 const feelslike_c = json.current.feelslike_c;\r\n//                 const weatherType = json.current.condition.text;\r\n//                 const icon = json.current.condition.icon;\r\n//                 const localTime = json.location.localtime;\r\n//                 const lastUpdated = json.current.last_updated;\r\n//                 const country = json.location.country;\r\n//                 setStoredWeather({temperature, wind, humidity, feelslike_c, weatherType, icon, country, localTime, lastUpdated});\r\n                \r\n//                 const lat = json.location.lat;\r\n//                 const lon = json.location.lon;\r\n//                 const cityName = json.location.name;\r\n//                 // setLiDropInfo([{lat, lon, cityName, country}]);\r\n\r\n//             })\r\n//         }\r\n\r\n//     };\r\n//     fetchData();\r\n    \r\n//    }, [cityNameInput]);\r\n \r\n//    const liURL = `http://api.weatherapi.com/v1key=${key}&q=${liDropInfo.lat}&q=${liDropInfo.lon}`\r\n\r\n   //////\r\n\r\n\r\n    return (\r\n    <div className=\"app__main-container\" >\r\n\r\n    <div onClick={handleClick} className=\"app__form\">\r\n        <form>\r\n            <input onKeyUp={debouncedOnChange} type=\"text\" placeholder=\"Search City...\" />\r\n            <ul>\r\n              {/* {mapItems()} */}\r\n            </ul>\r\n\r\n        </form>\r\n    </div>\r\n{/* \r\n    <div className=\"app__show-wheather \">\r\n\r\n        <div id=\"weather\" className=\"flex__center\">\r\n            <img src={storedWeather.icon} alt=\"icon\" id=\"icon\" />\r\n            <h1 className=\"degree\">{storedWeather.temperature}&deg;C</h1>\r\n            <h3 >{storedWeather.weatherType}</h3>\r\n            <h2 id=\"city\">{cityNameInput}</h2>\r\n            <button id=\"change\">Change City</button>\r\n\r\n            <div className=\"info\">\r\n\r\n                <div>\r\n                    <h3>Wind</h3>\r\n                    <div id=\"windValue\" className=\"value\"><p>{storedWeather.wind}</p><span>Km/h</span></div>\r\n                </div>\r\n                <div>\r\n                    <h3>Feels Like</h3>\r\n                    <div id=\"feelsLikeValue\" className=\"value\"><p>{storedWeather.feelslike_c}&deg;C</p><span></span></div>\r\n                </div>\r\n                <div>\r\n                    <h3>Humidity</h3>\r\n                    <div id=\"humidityValue\" className=\"value\"><p>{storedWeather.humidity}</p><span>%</span></div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    </div> */}\r\n        \r\n    </div>\r\n    )\r\n\r\n};\r\n\r\nexport default SearchCity;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}