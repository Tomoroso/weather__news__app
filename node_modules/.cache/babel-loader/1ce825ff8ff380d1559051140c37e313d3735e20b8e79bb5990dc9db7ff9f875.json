{"ast":null,"code":"var _jsxFileName = \"F:\\\\The Complete 2023 Web Development Bootcamp\\\\STUDY-PROJECTS\\\\YoutubeProjects\\\\weather_app\\\\src\\\\components\\\\WeatherScreen\\\\WeatherScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './weatherScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherScreen = () => {\n  _s();\n  const oldKey = \"1d57fcba75368cc323dc71241f670c5d\";\n  const [cityLatitude, setCityLatitude] = useState([]);\n  const cityName = 'London';\n  const [weather, setWeather] = useState([]);\n  const [geoLocation, setGeoLocation] = useState([]);\n  const [clickedCityData, setClickedCityData] = useState([]);\n  useEffect(() => {\n    const searchTemp = async () => {\n      const tempURL = `https://api.openweathermap.org/data/2.5/weather?${clickedCityData.lat}&${clickedCityData.lon}&appid=${oldKey}`;\n      const response = await fetch(tempURL);\n      const data = await response.json();\n\n      // setWeather(data);\n    };\n    searchTemp();\n  }, [clickedCityData]);\n\n  //From here I satrt the process of getting geolocation of the city     \n\n  //Here I take the geoLocation data.\n  useEffect(() => {\n    const search = async () => {\n      const URL = `http://api.openweathermap.org/geo/1.0/direct?q=${cityName},&limit=5&appid=${oldKey}`;\n      const response = await fetch(URL);\n      const data = await response.json();\n      console.log('Here i have all the geolocation data:', data); // As i understand from here I need just - lat - and - lon.\n      data.map(item => {\n        const cityLat = item.lat;\n        setCityLatitude(cityLat);\n        console.log('map trough item cityLat: ', cityLat);\n      });\n\n      // setGeoLocation(data);                                        // to get the temperature of the city a click\n    };\n    search();\n  }, [cityName]);\n  console.log('test cityLat hook: ', cityLatitude);\n  //------------------------------------>\n\n  console.log(`Here I have the geolocation from geoLocation variable: ${geoLocation}`);\n\n  //Here i get the clicked city geolocation info\n  const handleClick = e => {\n    const li = e.target;\n    const data = li.dataset; // Access the dataset of the clicked element\n    setClickedCityData(data);\n\n    //    console.log('clicked element:', li);\n    //    console.log('Clicked element city name:', data.city);\n    //    console.log('Clicked element city country:', data.country);\n    //    console.log('Clicked element city latitude:', data.lat);\n    //    console.log('Clicked element city longitude:', data.lon);\n  };\n  //---------------------------------------------->\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleClick,\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: geoLocation.map(({\n        name,\n        lat,\n        lon,\n        country\n      }, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"app__list-item\",\n        \"data-lat\": lat,\n        \"data-lon\": lon,\n        \"data-city\": name,\n        \"data-country\": country,\n        children: [name, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 24\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), clickedCityData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: clickedCityData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 1\n  }, this);\n};\n_s(WeatherScreen, \"zP50e3VyFmsD5N5N+qFPbzFS4KQ=\");\n_c = WeatherScreen;\nexport default WeatherScreen;\n\n/* <div className=\"app__main-container\" >\r\n\r\n<div onClick={handleClick} className=\"app__form\">\r\n    <form>\r\n        <input onKeyUp={debouncedOnChange} type=\"text\" placeholder=\"Search City...\" />\r\n        <ul>\r\n        {mapItems()}\r\n        </ul>\r\n\r\n    </form>\r\n</div>\r\n\r\n<div className=\"app__show-wheather \">\r\n\r\n    <div id=\"weather\" className=\"flex__center\">\r\n        <img src={`https://openweathermap.org/img/wn/${infoToExport.icon}@4x.png`} alt=\"icon\" id=\"icon\" />\r\n        <h1 className=\"degree\">{infoToExport.temp}&deg;C</h1>\r\n        <h2 id=\"city\">{info.cityName}</h2>\r\n        <button id=\"change\">Change City</button>\r\n\r\n        <div className=\"info\">\r\n\r\n            <div>\r\n                <h3>Wind</h3>\r\n                <div id=\"windValue\" className=\"value\"><p>{infoToExport.wind}</p><span>Km/h</span></div>\r\n            </div>\r\n            <div>\r\n                <h3>Feels Like</h3>\r\n                <div id=\"feelsLikeValue\" className=\"value\"><p>{infoToExport.feelsLike}&deg;C</p><span></span></div>\r\n            </div>\r\n            <div>\r\n                <h3>Humidity</h3>\r\n                <div id=\"humidityValue\" className=\"value\"><p>{infoToExport.humidity}</p><span>%</span></div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n</div>\r\n    \r\n</div>\r\n\r\n\r\n\r\n---------------- */ //}\n// const [infoToExport, setInfoToExport] = useState([{\n//     temp: 0,\n//     feelsLike: 0,\n//     humidity: 0,\n//     wind: 0,\n//     icon: ''\n// }]);\n\n// const [userInput, setUserInput] = useState(\"\");\n// const [ulValue, setUlValue] = useState([]);\n// const updateUserInput = e => setUserInput(e?.target?.value);\n// const debouncedOnChange = debounce(updateUserInput, 600);\n\n/*Here I get the weather information */\n\n// const [weatherData, setWeather] = useState({});\n// const [info, setInfo] = useState({\n//     cityLat: 52.377956,\n//     cityLon: 4.897070,\n//     cityName : 'Amsterdam',\n\n// })\n\n// useEffect(() => {\n\n//     fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${info.cityLat}&lon=${info.cityLon}&appid=${key}&units=metric`)\n//     .then(response => response.json())\n//     .then(data => setWeather(data))\n//     .catch(err => console.log(err))\n// }, []);\n\n// const handleClick = (ev) => {\n//     const li = ev.target;\n//     const {lat, lon, name} = li.dataset;\n\n//     if (!lat) {\n//         return;\n//     }\n//     console.log(`Test 2 ${lat}`);\n//     setInfo(({\n//         cityLat: lat,\n//         cityLon: lon,\n//         cityName: name\n//     }));\n\n//     const temp = Math.round(weatherData.main.temp);\n//     const feelsLike = Math.round(weatherData.main.feels_like);\n//     const humidity = Math.round(weatherData.main.humidity);\n//     const wind = Math.round(weatherData.wind.speed);\n//     const icon = weatherData.weather[0].icon;\n//     setInfoToExport({ temp, feelsLike, humidity, wind, icon });\n//     }\n\n/* Trough here */\n\n/*Here I get the City name and can click on it to get the onfo about the weather */\n// useEffect(() => {\n\n//      fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${userInput}&limit=5&appid=${key}`)\n//     .then(response => response.json())\n//     .then(data => {\n//         if (Array.isArray(data)) {\n//           setUlValue(data);\n\n//         } else {\n//           setUlValue([]);\n//         }\n//       })\n//     .catch(err => console.log(err))\n\n// }, [userInput]);\n\n// useEffect(() => {\n//     const fetchData = async () => {\n//         const result = await fetch(cityNameURL);\n//         result.json().then(json => {\n//             setUserInput(json.current.temp_c);\n//         })\n\n//     }\n//     fetchData();\n//     console.log(userInput);\n// }, []);\n\n// const mapItems = () => (\n//     ulValue.map(({name, lat, lon, country}, index) => (\n//         <li \n\n//         data-lat={lat} \n//         data-lon={lon} \n//         data-name={name} \n//         key={index}\n//         >\n//         {name} <span>{country}</span>\n\n//         </li>\n//     ))\n// )\n\n/* Trough here */\nvar _c;\n$RefreshReg$(_c, \"WeatherScreen\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherScreen","_s","oldKey","cityLatitude","setCityLatitude","cityName","weather","setWeather","geoLocation","setGeoLocation","clickedCityData","setClickedCityData","searchTemp","tempURL","lat","lon","response","fetch","data","json","search","URL","console","log","map","item","cityLat","handleClick","e","li","target","dataset","onClick","children","name","country","index","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/The Complete 2023 Web Development Bootcamp/STUDY-PROJECTS/YoutubeProjects/weather_app/src/components/WeatherScreen/WeatherScreen.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nimport './weatherScreen.css'\r\nconst WeatherScreen = () => {\r\n    const oldKey = \"1d57fcba75368cc323dc71241f670c5d\";\r\n\r\n    const [cityLatitude, setCityLatitude] = useState([]);\r\n\r\n    const cityName = 'London';\r\n    const [weather, setWeather] = useState([]);\r\n    const [geoLocation, setGeoLocation] = useState([]);\r\n    const [clickedCityData, setClickedCityData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const searchTemp = async () => {\r\n            const tempURL = `https://api.openweathermap.org/data/2.5/weather?${clickedCityData.lat}&${clickedCityData.lon}&appid=${oldKey}`;\r\n            const response = await fetch(tempURL);\r\n            const data = await response.json();\r\n           \r\n\r\n            // setWeather(data);\r\n\r\n\r\n        }\r\n        searchTemp();\r\n    }, [clickedCityData]);\r\n\r\n\r\n//From here I satrt the process of getting geolocation of the city     \r\n\r\n//Here I take the geoLocation data.\r\n    useEffect(() => {\r\n        const search = async () => {\r\n            const URL = `http://api.openweathermap.org/geo/1.0/direct?q=${cityName},&limit=5&appid=${oldKey}`;\r\n            const response = await fetch(URL);\r\n            const data = await response.json();\r\n            console.log('Here i have all the geolocation data:', data);// As i understand from here I need just - lat - and - lon.\r\n            data.map((item) => {\r\n                const cityLat = item.lat;\r\n                setCityLatitude(cityLat);\r\n                console.log('map trough item cityLat: ', cityLat);\r\n            })\r\n            \r\n            // setGeoLocation(data);                                        // to get the temperature of the city a click\r\n        }\r\n        search();\r\n    }, [cityName]);\r\n\r\n    console.log('test cityLat hook: ', cityLatitude);\r\n//------------------------------------>\r\n\r\n    console.log(`Here I have the geolocation from geoLocation variable: ${geoLocation}`);\r\n\r\n//Here i get the clicked city geolocation info\r\n   const handleClick = (e) => {\r\n       const li = e.target;\r\n       const data = li.dataset;  // Access the dataset of the clicked element\r\n       setClickedCityData(data);\r\n\r\n    //    console.log('clicked element:', li);\r\n    //    console.log('Clicked element city name:', data.city);\r\n    //    console.log('Clicked element city country:', data.country);\r\n    //    console.log('Clicked element city latitude:', data.lat);\r\n    //    console.log('Clicked element city longitude:', data.lon);\r\n   }\r\n//---------------------------------------------->\r\n\r\n\r\n\r\n\r\nreturn (\r\n<div onClick={handleClick}>\r\n    <ul >\r\n        {geoLocation.map(({name, lat, lon, country}, index) => (\r\n            <li className=\"app__list-item\"\r\n            key={index}\r\n            data-lat={lat}\r\n            data-lon={lon}\r\n            data-city={name}\r\n            data-country={country}\r\n            >\r\n                {name} <span>{country}</span>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n    {clickedCityData && (\r\n        <div>\r\n        <p>{clickedCityData.name}</p>\r\n        </div>\r\n    )}\r\n\r\n</div>\r\n\r\n    )\r\n\r\n     \r\n\r\n}\r\n\r\n\r\nexport default WeatherScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* <div className=\"app__main-container\" >\r\n\r\n<div onClick={handleClick} className=\"app__form\">\r\n    <form>\r\n        <input onKeyUp={debouncedOnChange} type=\"text\" placeholder=\"Search City...\" />\r\n        <ul>\r\n        {mapItems()}\r\n        </ul>\r\n\r\n    </form>\r\n</div>\r\n\r\n<div className=\"app__show-wheather \">\r\n\r\n    <div id=\"weather\" className=\"flex__center\">\r\n        <img src={`https://openweathermap.org/img/wn/${infoToExport.icon}@4x.png`} alt=\"icon\" id=\"icon\" />\r\n        <h1 className=\"degree\">{infoToExport.temp}&deg;C</h1>\r\n        <h2 id=\"city\">{info.cityName}</h2>\r\n        <button id=\"change\">Change City</button>\r\n\r\n        <div className=\"info\">\r\n\r\n            <div>\r\n                <h3>Wind</h3>\r\n                <div id=\"windValue\" className=\"value\"><p>{infoToExport.wind}</p><span>Km/h</span></div>\r\n            </div>\r\n            <div>\r\n                <h3>Feels Like</h3>\r\n                <div id=\"feelsLikeValue\" className=\"value\"><p>{infoToExport.feelsLike}&deg;C</p><span></span></div>\r\n            </div>\r\n            <div>\r\n                <h3>Humidity</h3>\r\n                <div id=\"humidityValue\" className=\"value\"><p>{infoToExport.humidity}</p><span>%</span></div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n</div>\r\n    \r\n</div>\r\n\r\n\r\n\r\n---------------- *///}\r\n    // const [infoToExport, setInfoToExport] = useState([{\r\n    //     temp: 0,\r\n    //     feelsLike: 0,\r\n    //     humidity: 0,\r\n    //     wind: 0,\r\n    //     icon: ''\r\n    // }]);\r\n\r\n    \r\n    // const [userInput, setUserInput] = useState(\"\");\r\n    // const [ulValue, setUlValue] = useState([]);\r\n    // const updateUserInput = e => setUserInput(e?.target?.value);\r\n    // const debouncedOnChange = debounce(updateUserInput, 600);\r\n\r\n    \r\n/*Here I get the weather information */\r\n\r\n    // const [weatherData, setWeather] = useState({});\r\n    // const [info, setInfo] = useState({\r\n    //     cityLat: 52.377956,\r\n    //     cityLon: 4.897070,\r\n    //     cityName : 'Amsterdam',\r\n        \r\n    // })\r\n\r\n    \r\n    \r\n    \r\n    // useEffect(() => {\r\n\r\n    //     fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${info.cityLat}&lon=${info.cityLon}&appid=${key}&units=metric`)\r\n    //     .then(response => response.json())\r\n    //     .then(data => setWeather(data))\r\n    //     .catch(err => console.log(err))\r\n    // }, []);\r\n    \r\n    \r\n    // const handleClick = (ev) => {\r\n    //     const li = ev.target;\r\n    //     const {lat, lon, name} = li.dataset;\r\n        \r\n    //     if (!lat) {\r\n    //         return;\r\n    //     }\r\n    //     console.log(`Test 2 ${lat}`);\r\n    //     setInfo(({\r\n    //         cityLat: lat,\r\n    //         cityLon: lon,\r\n    //         cityName: name\r\n    //     }));\r\n          \r\n        \r\n    //     const temp = Math.round(weatherData.main.temp);\r\n    //     const feelsLike = Math.round(weatherData.main.feels_like);\r\n    //     const humidity = Math.round(weatherData.main.humidity);\r\n    //     const wind = Math.round(weatherData.wind.speed);\r\n    //     const icon = weatherData.weather[0].icon;\r\n    //     setInfoToExport({ temp, feelsLike, humidity, wind, icon });\r\n    //     }\r\n\r\n/* Trough here */\r\n\r\n/*Here I get the City name and can click on it to get the onfo about the weather */\r\n    // useEffect(() => {\r\n\r\n    //      fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${userInput}&limit=5&appid=${key}`)\r\n    //     .then(response => response.json())\r\n    //     .then(data => {\r\n    //         if (Array.isArray(data)) {\r\n    //           setUlValue(data);\r\n              \r\n    //         } else {\r\n    //           setUlValue([]);\r\n    //         }\r\n    //       })\r\n    //     .catch(err => console.log(err))\r\n\r\n    // }, [userInput]);\r\n\r\n    // useEffect(() => {\r\n    //     const fetchData = async () => {\r\n    //         const result = await fetch(cityNameURL);\r\n    //         result.json().then(json => {\r\n    //             setUserInput(json.current.temp_c);\r\n    //         })\r\n            \r\n    //     }\r\n    //     fetchData();\r\n    //     console.log(userInput);\r\n    // }, []);\r\n\r\n    // const mapItems = () => (\r\n    //     ulValue.map(({name, lat, lon, country}, index) => (\r\n    //         <li \r\n\r\n    //         data-lat={lat} \r\n    //         data-lon={lon} \r\n    //         data-name={name} \r\n    //         key={index}\r\n    //         >\r\n    //         {name} <span>{country}</span>\r\n\r\n    //         </li>\r\n    //     ))\r\n    // )\r\n\r\n/* Trough here */\r\n\r\n"],"mappings":"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,UAAA;IAAAC,YAAA;EAAA,OAEA,CAAC;AAMN,CAAC;AAAAxC,EAAA,CA9FKD,aAAa;AAAA0C,EAAA,GAAb1C,aAAa;AAiGnB,eAAeA,aAAa;;AAS5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBA9CA,CA8CmB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGJ;;AAEI;AACA;AACA;AACA;AACA;;AAEA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ;;AAEA;AACI;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEJ;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}